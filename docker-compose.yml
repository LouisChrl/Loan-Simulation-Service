services:

  # --- Database --------------------------------------------------------------
  db:
    image: postgres:16-alpine
    container_name: loan_db
    restart: always
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    volumes:
      - db_data:/var/lib/postgresql/data # Persist Data
      - ./db/init.sql:/docker-entrypoint-initdb.d/01_init.sql:ro
      - ./db/sample_data.sql:/docker-entrypoint-initdb.d/02_sample_data.sql:ro

    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB} -h 127.0.0.1 -p ${CONTAINER_DB_PORT}"]
      interval: 5s
      timeout: 3s
      retries: 10
    networks:
      loan_app_backend:
        aliases: [loan_db]
  
  adminer:
    image: adminer
    container_name: adminer
    depends_on:
      db:
        condition: service_healthy
    restart: always
    ports:
      - "${ADMINER_PORT}:${CONTAINER_ADMINER_PORT}" # Exposed for database management (Development only)
    networks:
      loan_app_backend:
        aliases: [adminer]
  
  # --- Accounts (REST) -------------------------------------------------------
  # accounts:
  #   build: ./services/accounts
  #   environment:
  #     DATABASE_URL: postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@db:${CONTAINER_DB_PORT}/${POSTGRES_DB}
  #     PORT: ${CONTAINER_REST_PORT}
  #   depends_on:
  #     db:
  #       condition: service_healthy
  #   ports:
  #     - "${ACCOUNTS_PORT}:${CONTAINER_REST_PORT}"
  #   networks:
  #     loan_app_backend:
  #       aliases: [accounts]
  
  # --- Loan Orchestrator (REST) ---------------------------------------------
  # loan_orchestrator:
  #   build: ./services/loan_orchestrator
  #   environment:
  #     DATABASE_URL: postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@db:${CONTAINER_DB_PORT}/${POSTGRES_DB}
  #     MAX_LOAN_AMOUNT: ${MAX_LOAN_AMOUNT:-50000}
  #     RISK_GRPC_ADDR: risk_scoring:${CONTAINER_GRPC_PORT}
  #     SOAP_CHECK_URL: http://bank_check_validation:${CONTAINER_SOAP_PORT}/ws
  #     PROVIDER_URL: http://provider_funding:${CONTAINER_REST_PORT}/fund
  #     SENDGRID_API_KEY: ${SENDGRID_API_KEY}
  #     PORT: ${CONTAINER_REST_PORT}
  #   depends_on:
  #     db:
  #       condition: service_healthy
  #     risk_scoring:
  #       condition: service_started
  #     bank_check_validation:
  #       condition: service_started
  #     provider_funding:
  #       condition: service_started
  #   ports:
  #     - "${ORCH_PORT}:${CONTAINER_REST_PORT}"
  #   networks:
  #     loan_app_backend:
  #       aliases: [loan_orchestrator]
  
  # --- Risk Scoring (gRPC) ---------------------------------------------------
  # risk_scoring:
  #   build: ./services/risk_scoring
  #   environment:
  #     PORT: ${CONTAINER_GRPC_PORT}
  #   ports:
  #     - "${RISK_PORT}:${CONTAINER_GRPC_PORT}"
  #   networks:
  #     loan_app_backend:
  #       aliases: [risk_scoring]
  
  # --- Bank Check Validation (SOAP) -----------------------------------------
  bank_check_validation:
    build: ./services/bank_check_validation
    environment:
      DB_HOST: ${DB_HOST}
      DB_PORT: ${DB_PORT}
      DB_USER: ${DB_USER}
      DB_PASSWORD: ${DB_PASSWORD}
      DB_NAME: ${DB_NAME}
      PORT: ${CONTAINER_SOAP_PORT}
    ports:
      - "${SOAP_PORT}:${CONTAINER_SOAP_PORT}"
    networks:
      loan_app_backend:
        aliases: [bank_check_validation]
  
  # --- Provider Funding (REST, stub) ----------------------------------------
  # provider_funding:
  #   build: ./services/provider_funding
  #   environment:
  #     PORT: ${CONTAINER_REST_PORT}
  #   ports:
  #     - "${PROVIDER_PORT}:${CONTAINER_REST_PORT}"
  #   networks:
  #      loan_app_backend:
  #        aliases: [provider_funding]
  
  # --- Loan Portal BFF (GraphQL) --------------------------------------------
  loan_portal_bff:
    build: ./services/loan_portal_bff
    environment:
      LOAN_API_URL: http://loan_orchestrator:${CONTAINER_REST_PORT}
      ACCOUNTS_API_URL: http://accounts:${CONTAINER_REST_PORT}
      PORT: ${CONTAINER_BFF_PORT}
    depends_on:
      bank_check_validation:
        condition: service_started
    #   loan_orchestrator:
    #     condition: service_started
    #   accounts:
    #     condition: service_started
    ports:
      - "${BFF_PORT}:${CONTAINER_BFF_PORT}"
    networks:
      loan_app_backend:
        aliases: [loan_portal_bff]

volumes:
    db_data:

networks:
  loan_app_backend:
    external: true